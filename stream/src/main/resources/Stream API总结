一、定义：Stream是Java8中处理集合的关键抽象概念，可以对集合进行非常复杂的查找、过滤和映射数据等操作。使用Stream  API对集合数据进行操作，
类似于使用sql执行的数据库查询，且支持并行执行操作。
1、流是数据渠道，用于操作数据源(集合、数组)所生成的元素序列。
2、集合讲的是数据，流讲的是计算。

二、特点：
1、Stream自身不会存储元素。
2、Stream不会改变源对象，它们会返回一个持有结果的新Stream。
3、Stream操作是延迟执行的，它们会等到需要结果的时候再去执行。

三、操作步骤：
1、创建Stream：一个数据源(集合、数组)，获取一个流。
2、中间操作：一个中间操作链，对数据源数据进行处理。
3、终止操作：一个终止操作，执行中间操作链，并产生结果。

四、常用API及创建方式：
1、创建Stream方式：
(1)Java8中Collection接口被扩展，提供了两个获取流的方法:
default Stream<E> stream() --返回一个顺序流
default Stream<E> parallelStream() --返回一个并行流
(2)Java8中的Arrays的静态方法stream()可以获取数据流:
static <T>  Stream<T> stream(T[] array) --返回一个流
public static IntStream stream(int[] array) --重载形式，能够处理对应基本类型的数组
public static LongStream stream(long[] array) --重载形式，能够处理对应基本类型的数组
public static DoubleStream stream(double[] array) --重载形式，能够处理对应基本类型的数组
(3)通过Stream类的静态方法of(),由显示值的方式创建一个流:
public static <T> Stream<T> of(T... values) --返回一个流
(4)通过函数创建无限流:
public static<T> Stream<T> iterate(final T seed,final UnaryOperator<T> f) --迭代
public static<T> Stream<T> generate<Supplier<T> s> --生成

2、Stream的中间操作：多个中间操作可以连接起来形成一个流水线，除非流水线上触发终止操作，否则中间操作不会执行任何处理，而是在终止操作时一次性
全部处理，称为"惰性求职"。
(1)筛选和切片
filter(Predicate p)--接收lambda，从流中排除某些元素
distinct()--筛选，通过流所生成元素的hashcode()和equals()去除重复元素
limit(long maxSize)--截断流，使其元素不超过给定数量
skip(long n)--跳过元素，返回一个扔掉前n个元素的流，若流中元素不足n个，则返回一个空流。与limit(n)互补
(2)映射
map(Function f)--接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素
mapToDouble(ToDoubleFunction f)--接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的DoubleStream
mapToLong(ToLongFunction f)--接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的LongStream
mapToInt(ToIntFunction f)--接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的IntStream
flatMap(Function f)--接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流
(3)排序
sorted()--自然排序(Comparable)
sorted(Comparator comparator)--定制排序(Comparator)

3、终止操作：终止操作会从流的流水线生成结果，其结果可以是任何不是流的值，例如：List、Integer、void等。
(1)查找与匹配
allMatch(Predicate p)--检查是否匹配所有元素
anyMatch(Predicate p)--检查是否至少匹配一个元素
noneMatch(Predicate p)--检查是否没有匹配任何元素
findFirst()--返回第一个元素
findAny()--返回当前流中的任意元素
count()--返回流中元素总数
max(Comparator c)--返回流中最大值
min(Comparator c)--内部迭代(Collection接口需要用户去做迭代称为外部迭代)
(2)归约--对集合中的元素一定操作，并对操作结果求和
reduce(T iden,BinaryOperator b)--可以将流中元素反复结合起来，得到一个值，返回T
reduce(BinaryOperator b)--可以将流中元素反复结合起来，得到一个值，返回Optional<T>
(3)收集
collect(Collector c)--将流转换为其他形式，接收一个Collector接口的实现，用于给Stream中元素做汇总的方法。
Collector接口中方法的实现决定了如何对流执行收集操作(如收集到List、Set、Map),且Collectors实用类提供了很多静态方法，可以方便地创建常见收集器实例。
Collectors.toList--List<T>,把流中元素收集到List
Collectors.toSet--Set<T>,把流中元素收集到Set
Collectors.toCollection--Collection<T>,把流中元素收集到创建的集合
Collectors.counting--Long,计算流中元素的个数
Collectors.summingInt--Integer,对流中元素的Integer属性求和
Collectors.averagingInt--Double,计算流中元素Integer属性的平均值
Collectors.summarizingInt--IntSummaryStatistics,收集流中Integer属性的统计值
Collectors.joining--String,连接流中每个字符串
Collectors.maxBy--Optional<T>,根据比较强选择最大值
Collectors.minBy--Optional<T>,根据比较器选择最小值
Collectors.reducing--归约产生的类型，从一个作为累加器的初始值开始，利用BinaryOperator与流中元素逐个结合，从而归约成单个值
Collectors.collectingAndThen--转换函数返回的类型，包裹另一个收集器，对其结果转换函数
Collectors.groupingBy--Map<K,List<T>>，根据某属性值对流分组，属性K，结果为V
Collectors.partitioningBy--Map<Boolean,List<T>>,根据true或false进行分区



